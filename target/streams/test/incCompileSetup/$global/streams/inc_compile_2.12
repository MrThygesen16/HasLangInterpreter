format version: 5
output mode:
1 items
0 -> single
output directories:
1 items
output dir -> /home/mike/Documents/COMP3000/comp3000-haslang/target/scala-2.12/test-classes
compile options:
6 items
0 -> -deprecation
1 -> -feature
2 -> -unchecked
3 -> -Xcheckinit
4 -> -Xfatal-warnings
5 -> -Xlint:-stars-align,-unused,_
javac options:
0 items
compiler version:
1 items
0 -> 2.12.8
compile order:
1 items
0 -> Mixed
name hashing:
1 items
0 -> true
products:
1 items
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> /home/mike/Documents/COMP3000/comp3000-haslang/target/scala-2.12/test-classes/haslang/SyntaxAnalysisTests.class
binary dependencies:
7 items
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> /home/mike/.ivy2/cache/junit/junit/jars/junit-4.12.jar
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> /home/mike/.ivy2/cache/org.bitbucket.inkytonik.kiama/kiama_2.12/jars/kiama_2.12-2.1.0-tests.jar
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> /home/mike/.ivy2/cache/org.bitbucket.inkytonik.kiama/kiama_2.12/jars/kiama_2.12-2.1.0.jar
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> /home/mike/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.8.jar
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> /home/mike/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.3.jar
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> /home/mike/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.3.jar
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/rt.jar
direct source dependencies:
0 items
direct external dependencies:
0 items
public inherited source dependencies:
0 items
public inherited external dependencies:
0 items
member reference internal dependencies:
0 items
member reference external dependencies:
2 items
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> haslang.HasLangTree$
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> haslang.SyntaxAnalysis
inheritance internal dependencies:
0 items
inheritance external dependencies:
0 items
class names:
1 items
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> haslang.SyntaxAnalysisTests
used names:
97 items
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> <byname>
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> <init>
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> <refinement>
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> <repeated>
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> A
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> Any
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> AnyPat
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> AnyRef
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> AnyShouldWrapper
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> AppExp
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> Assertion
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> BoolExp
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> BoolType
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> Boolean
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> ConsExp
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> ConsPat
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> Defn
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> EqualExp
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> Exp
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> FunLine
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> FunType
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> HasLangNode
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> HasLangTree
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> IdentPat
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> Identifier
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> IdnDef
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> IdnUse
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> IfExp
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> Int
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> IntExp
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> IntType
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> JUnitRunner
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> LamExp
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> LessExp
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> LetExp
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> ListExp
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> ListPat
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> ListType
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> LiteralPat
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> Matcher
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> MinusExp
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> Nothing
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> Object
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> PackratParser
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> ParseResult
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> ParseTests
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> Pat
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> PlusExp
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> Position
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> Positions
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> Predef
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> Prettifier
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> Program
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> RunWith
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> SlashExp
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> StarExp
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> String
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> SyntaxAnalysis
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> SyntaxAnalysisTests
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> T
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> Tag
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> TupleExp
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> TuplePat
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> TupleType
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> Type
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> Unit
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> UnitType
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> Vector
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> apply
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> bitbucket
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> convertToAnyShouldWrapper
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> default
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> definitions
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> defn
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> exp
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> funline
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> haslang
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> here
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> inkytonik
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> junit
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> kiama
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> org
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> package
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> parseTo
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> parsers
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> pat
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> positions
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> program
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> runner
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> scala
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> scalactic
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> scalatest
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> should
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> source
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> test
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> tipe
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> util
product stamps:
1 items
/home/mike/Documents/COMP3000/comp3000-haslang/target/scala-2.12/test-classes/haslang/SyntaxAnalysisTests.class -> lastModified(1631512144000)
source stamps:
1 items
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> hash(d61d6caf8e970193f93fb8d1a13eb45e126e3a9a)
binary stamps:
7 items
/home/mike/.ivy2/cache/junit/junit/jars/junit-4.12.jar -> lastModified(1417709863000)
/home/mike/.ivy2/cache/org.bitbucket.inkytonik.kiama/kiama_2.12/jars/kiama_2.12-2.1.0-tests.jar -> lastModified(1497841549000)
/home/mike/.ivy2/cache/org.bitbucket.inkytonik.kiama/kiama_2.12/jars/kiama_2.12-2.1.0.jar -> lastModified(1497841555000)
/home/mike/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.8.jar -> lastModified(1543918558000)
/home/mike/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.3.jar -> lastModified(1492680537000)
/home/mike/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.3.jar -> lastModified(1492680712000)
/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/rt.jar -> lastModified(1619005569000)
class names:
7 items
/home/mike/.ivy2/cache/junit/junit/jars/junit-4.12.jar -> org.junit.runner.RunWith
/home/mike/.ivy2/cache/org.bitbucket.inkytonik.kiama/kiama_2.12/jars/kiama_2.12-2.1.0-tests.jar -> org.bitbucket.inkytonik.kiama.util.ParseTests
/home/mike/.ivy2/cache/org.bitbucket.inkytonik.kiama/kiama_2.12/jars/kiama_2.12-2.1.0.jar -> org.bitbucket.inkytonik.kiama.parsing.ParsersBase
/home/mike/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.8.jar -> scala.collection.immutable.Vector$
/home/mike/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.3.jar -> org.scalactic.Prettifier$
/home/mike/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.3.jar -> org.scalatest.Matchers
/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/rt.jar -> java.lang.Object
internal apis:
1 items
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> 

external apis:
2 items
haslang.HasLangTree$ -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwe/O+/QAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAABjc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwtCr62XQABm5vdGlmeXNxAH4ADHYKJtN0AAdGdW5UeXBlc3EAfgAM4vBxJnQAB3VuYXBwbHlzcQB+AAzvQLSUdAALVW5rbm93blR5cGVzcQB+AAwfriQPdAAHY3VycmllZHNxAH4ADEdwosp0AAhCb29sVHlwZXNxAH4ADH4TxO10AARib2R5c3EAfgAMEPN0BHQAB1BsdXNFeHBzcQB+AAyRGL9ZdAAITWludXNFeHBzcQB+AAwXhMr6dAAHTGlzdFBhdHNxAH4ADP0IPhJ0AANpZG5zcQB+AAwMqq+hdAAEd2FpdHNxAH4ADHheIo10AAd0aGVuRXhwc3EAfgAMeHZH93QADmNvcHkkZGVmYXVsdCQyc3EAfgAMbSjkjXQADSRhc0luc3RhbmNlT2ZzcQB+AAy+Nt2bdAAFZGVmbnNzcQB+AAxQBtJwdAABbnNxAH4ADO3yxjh0AAdjb21wb3Nlc3EAfgAMd15DgHQABklkblVzZXNxAH4ADDWN4NV0AAZBbnlQYXRzcQB+AAzOrTBGdAAMcHJvZHVjdEFyaXR5c3EAfgAM/jDeInQABHRpcGVzcQB+AAx3rwtodAAGZXF1YWxzc3EAfgAM/vppiXQAA1BhdHNxAH4ADExcqml0AAhUdXBsZVBhdHNxAH4ADGAq8fp0AAxhc0luc3RhbmNlT2ZzcQB+AAxCnpIvdAAHRnVuTGluZXNxAH4ADCAySE10AAxzeW5jaHJvbml6ZWRzcQB+AAxY+J62dAAEbGVmdHNxAH4ADCK/b/V0AAhUdXBsZUV4cHNxAH4ADOT9TOx0AA0kaXNJbnN0YW5jZU9mc3EAfgAMwxU5d3QABGV4cHNzcQB+AAwaJ9K2dAAHYW5kVGhlbnNxAH4ADM/jWOB0AAdJbnRUeXBlc3EAfgAMN4uRnXQABnR1cGxlZHNxAH4ADH3jGY10AAdDb25zRXhwc3EAfgAMwMpDqnQAB1N0YXJFeHBzcQB+AAyWn654dAAIY2FuRXF1YWxzcQB+AAzAHQsedAANcHJvZHVjdFByZWZpeHNxAH4ADPqrlIl0AANleHBzcQB+AAx9JdsIdAAHUHJvZ3JhbXNxAH4ADOgU02l0AAlub3RpZnlBbGxzcQB+AAy/V26qdAAHTGlzdEV4cHNxAH4ADME2/0B0AAJ0b3NxAH4ADC+R3Fh0AAhlbGVtVHlwZXNxAH4ADMrfjl50AANJZG5zcQB+AAzUSApLdAAHZWxzZUV4cHNxAH4ADK8RTpV0AAhVbml0VHlwZXNxAH4ADFgwUnB0AAxpc0luc3RhbmNlT2ZzcQB+AAxMDcAKdAACZm5zcQB+AAxWRSHmdAAGPGluaXQ+c3EAfgAMEOQSHHQABWlkZW50c3EAfgAM+SkqKnQAC0hhc0xhbmdOb2Rlc3EAfgAMwhzssnQAA0V4cHNxAH4ADNDK0jp0AAFic3EAfgAMi3O15HQABWFwcGx5c3EAfgAM2SE2DXQABklkbkRlZnNxAH4ADJcjIwF0AARwYXRzc3EAfgAMcy3YDnQAAj09c3EAfgAMAxjdPnQABWNsb25lc3EAfgAMR94IwXQABGZyb21zcQB+AAz0po3SdAAGQXBwRXhwc3EAfgAMJ7pOR3QAB0NvbnNQYXRzcQB+AAzgrrkAdAAGJGluaXQkc3EAfgAMuA5ayXQABkxhbUV4cHNxAH4ADLSuun10AA5jb3B5JGRlZmF1bHQkM3NxAH4ADFEqoLh0AARjb3B5c3EAfgAMINYQbHQACklkZW50aWZpZXJzcQB+AAyfm4NVdAALSGFzTGFuZ1RyZWVzcQB+AAzVvMSedAAIU2xhc2hFeHBzcQB+AAwYFrUxdAAJVHVwbGVUeXBlc3EAfgAMyB23I3QABkludEV4cHNxAH4ADCpkckd0AAh0b1N0cmluZ3NxAH4ADG0zrkF0AAREZWZuc3EAfgAMQ4FSVXQAAiE9c3EAfgAMbZ7coHQABGNvbmRzcQB+AAxp/fuHdAAHQm9vbEV4cHNxAH4ADB47Wi50AAhnZXRDbGFzc3NxAH4ADCnZ+d10AA5jb3B5JGRlZmF1bHQkMXNxAH4ADC4PEAR0AAhJZGVudFBhdHNxAH4ADFU7bT10AAhMaXN0VHlwZXNxAH4ADAk0fRB0AAhFcXVhbEV4cHNxAH4ADG3F7pp0AAZMZXRFeHBzcQB+AAyXANa7dAAFbGluZXNzcQB+AAxI6fj0dAACbmVzcQB+AAx7NnzYdAAFdHlwZXNzcQB+AAyRnLILdAAKTGl0ZXJhbFBhdHNxAH4ADFjA33l0AAdMZXNzRXhwc3EAfgAM/mMbmHQAAmVxc3EAfgAMrnlyCXQABmlkbmRlZnNxAH4ADIqzmu10AANhcmdzcQB+AAxSdVYDdAAPcHJvZHVjdEl0ZXJhdG9yc3EAfgAMXlhg8nQABXJpZ2h0c3EAfgAM/FZjwHQAAiMjc3EAfgAMFJ83qHQACGZpbmFsaXplc3EAfgAMDuhbI3QADnByb2R1Y3RFbGVtZW50c3EAfgAMwjvv0HQACGhhc2hDb2Rlc3EAfgAMYjOMa3QABFR5cGVzcQB+AAxudtXndAAFSWZFeHBzcgATeHNidGkuYXBpLlNvdXJjZUFQSblep/kpIzikAgACWwALZGVmaW5pdGlvbnN0ABdbTHhzYnRpL2FwaS9EZWZpbml0aW9uO1sACHBhY2thZ2VzdAAUW0x4c2J0aS9hcGkvUGFja2FnZTt4cHVyABdbTHhzYnRpLmFwaS5EZWZpbml0aW9uO4jJXOe0414OAgAAeHAAAAABc3IAE3hzYnRpLmFwaS5DbGFzc0xpa2WDNByh37CXbAIABEwADmRlZmluaXRpb25UeXBldAAaTHhzYnRpL2FwaS9EZWZpbml0aW9uVHlwZTtbABBzYXZlZEFubm90YXRpb25zdAATW0xqYXZhL2xhbmcvU3RyaW5nO0wACHNlbGZUeXBldAAQTHhzYnRpL2FwaS9MYXp5O0wACXN0cnVjdHVyZXEAfgDdeHIAIXhzYnRpLmFwaS5QYXJhbWV0ZXJpemVkRGVmaW5pdGlvbvkRbrHVUDziAgABWwAOdHlwZVBhcmFtZXRlcnN0ABpbTHhzYnRpL2FwaS9UeXBlUGFyYW1ldGVyO3hyABR4c2J0aS5hcGkuRGVmaW5pdGlvbocqG+hxQuNGAgAETAAGYWNjZXNzdAASTHhzYnRpL2FwaS9BY2Nlc3M7WwALYW5ub3RhdGlvbnN0ABdbTHhzYnRpL2FwaS9Bbm5vdGF0aW9uO0wACW1vZGlmaWVyc3QAFUx4c2J0aS9hcGkvTW9kaWZpZXJzO0wABG5hbWVxAH4ADXhwc3IAEHhzYnRpLmFwaS5QdWJsaWO6WD2ubC1gQgIAAHhyABB4c2J0aS5hcGkuQWNjZXNz3WKa+B1jMUgCAAB4cHVyABdbTHhzYnRpLmFwaS5Bbm5vdGF0aW9uO+uX6xkQ9o1IAgAAeHAAAAAAc3IAE3hzYnRpLmFwaS5Nb2RpZmllcnOX52HcEyZ7swIAAUIABWZsYWdzeHAAdAATaGFzbGFuZy5IYXNMYW5nVHJlZXVyABpbTHhzYnRpLmFwaS5UeXBlUGFyYW1ldGVyO9ltJg8onfK2AgAAeHAAAAAAfnIAGHhzYnRpLmFwaS5EZWZpbml0aW9uVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5FbnVtAAAAAAAAAAASAAB4cHQABk1vZHVsZXVyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAAF0AAxzY2FsYS5uYXRpdmVzcgAheHNidGkuYXBpLkFic3RyYWN0TGF6eSRTdHJpY3RMYXp5DWYcaykWKrgCAAFMAAV2YWx1ZXQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlwZXJ4YoghI79AAgAAeHIADnhzYnRpLmFwaS5UeXBlP2rZIRZJqsoCAAB4cHNxAH4A9nNyABN4c2J0aS5hcGkuU3RydWN0dXJlqar5gJNv2AACAANMAAhkZWNsYXJlZHEAfgDdTAAJaW5oZXJpdGVkcQB+AN1MAAdwYXJlbnRzcQB+AN14cQB+APtzcQB+APZ1cQB+ANgAAAAAc3EAfgD2dXEAfgDYAAAAAHNxAH4A9nVyABFbTHhzYnRpLmFwaS5UeXBlO3T/pVp7+elBAgAAeHAAAAACc3IAFHhzYnRpLmFwaS5Qcm9qZWN0aW9u89KNVOlFpC0CAAJMAAJpZHEAfgANTAAGcHJlZml4dAAWTHhzYnRpL2FwaS9TaW1wbGVUeXBlO3hxAH4A+nQABk9iamVjdHNyABN4c2J0aS5hcGkuU2luZ2xldG9u/Kdf+M9W5EYCAAFMAARwYXRodAAQTHhzYnRpL2FwaS9QYXRoO3hxAH4A+nNyAA54c2J0aS5hcGkuUGF0aJs9XAjOpSeEAgABWwAKY29tcG9uZW50c3QAGltMeHNidGkvYXBpL1BhdGhDb21wb25lbnQ7eHB1cgAaW0x4c2J0aS5hcGkuUGF0aENvbXBvbmVudDtD2gl0LWcWdAIAAHhwAAAAA3NyAAx4c2J0aS5hcGkuSWSYMmyLN1PEQAIAAUwAAmlkcQB+AA14cgAXeHNidGkuYXBpLlBhdGhDb21wb25lbnRfmiJbLoafvAIAAHhwdAAEamF2YXNxAH4BE3QABGxhbmdzcgAOeHNidGkuYXBpLlRoaXPbCe2mzFpAXAIAAHhxAH4BFHNxAH4BB3QAA0FueXNxAH4BC3NxAH4BDnVxAH4BEQAAAAJzcQB+ARN0AAVzY2FsYXEAfgEadXIAFFtMeHNidGkuYXBpLlBhY2thZ2U7WxMZN3CnJ6ECAAB4cAAAAAFzcgAReHNidGkuYXBpLlBhY2thZ2V+WY/2rs45WAIAAUwABG5hbWVxAH4ADXhwdAAHaGFzbGFuZ3NyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABe92zboZ1cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5cQB+AA1MAA9zb3VyY2VEaXJlY3RvcnlxAH4ADXhwdABIL2hvbWUvbWlrZS9Eb2N1bWVudHMvQ09NUDMwMDAvY29tcDMwMDAtaGFzbGFuZy90YXJnZXQvc2NhbGEtMi4xMi9jbGFzc2VzdAABL3VyAAJbQqzzF/gGCFTgAgAAeHAAAAAU46hlJot10U85e9mpXVCiiiRDUAI=
haslang.SyntaxAnalysis -> 

source infos:
1 items
/home/mike/Documents/COMP3000/comp3000-haslang/src/test/scala/SyntaxAnalysisTests.scala -> 
AAAAAAAAAAA=
compilations:
1 items
0 -> rO0ABXNyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABe92znEB1cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5dAASTGphdmEvbGFuZy9TdHJpbmc7TAAPc291cmNlRGlyZWN0b3J5cQB+AAZ4cHQATS9ob21lL21pa2UvRG9jdW1lbnRzL0NPTVAzMDAwL2NvbXAzMDAwLWhhc2xhbmcvdGFyZ2V0L3NjYWxhLTIuMTIvdGVzdC1jbGFzc2VzdAABLw==
