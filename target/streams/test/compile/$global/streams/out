[0m[[0m[31merror[0m] [0m[0m/home/mike/Documents/COMP3000/comp3000-haslang-REDO/src/test/scala/SyntaxAnalysisTests.scala:433:30: overloaded method value should with alternatives:[0m
[0m[[0m[31merror[0m] [0m[0m  (endWithWord: org.scalatest.words.EndWithWord)(implicit ev: org.bitbucket.inkytonik.kiama.parsing.ParseResult[haslang.HasLangTree.Defn] <:< String)SyntaxAnalysisTests.this.ResultOfEndWithWordForString <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (startWithWord: org.scalatest.words.StartWithWord)(implicit ev: org.bitbucket.inkytonik.kiama.parsing.ParseResult[haslang.HasLangTree.Defn] <:< String)SyntaxAnalysisTests.this.ResultOfStartWithWordForString <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (includeWord: org.scalatest.words.IncludeWord)(implicit ev: org.bitbucket.inkytonik.kiama.parsing.ParseResult[haslang.HasLangTree.Defn] <:< String)SyntaxAnalysisTests.this.ResultOfIncludeWordForString <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (notExist: org.scalatest.words.ResultOfNotExist)(implicit existence: org.scalatest.enablers.Existence[org.bitbucket.inkytonik.kiama.parsing.ParseResult[haslang.HasLangTree.Defn]])org.scalatest.Assertion <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (existWord: org.scalatest.words.ExistWord)(implicit existence: org.scalatest.enablers.Existence[org.bitbucket.inkytonik.kiama.parsing.ParseResult[haslang.HasLangTree.Defn]])org.scalatest.Assertion <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (containWord: org.scalatest.words.ContainWord)org.scalatest.words.ResultOfContainWord[org.bitbucket.inkytonik.kiama.parsing.ParseResult[haslang.HasLangTree.Defn]] <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (haveWord: org.scalatest.words.HaveWord)SyntaxAnalysisTests.this.ResultOfHaveWordForExtent[org.bitbucket.inkytonik.kiama.parsing.ParseResult[haslang.HasLangTree.Defn]] <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (beWord: org.scalatest.words.BeWord)SyntaxAnalysisTests.this.ResultOfBeWordForAny[org.bitbucket.inkytonik.kiama.parsing.ParseResult[haslang.HasLangTree.Defn]] <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (inv: org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[org.bitbucket.inkytonik.kiama.parsing.ParseResult[haslang.HasLangTree.Defn]])(implicit ev: Numeric[org.bitbucket.inkytonik.kiama.parsing.ParseResult[haslang.HasLangTree.Defn]])org.scalatest.Assertion <and>[0m
[0m[[0m[31merror[0m] [0m[0m  [U](inv: org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[U])(implicit constraint: org.scalactic.CanEqual[org.bitbucket.inkytonik.kiama.parsing.ParseResult[haslang.HasLangTree.Defn],U])org.scalatest.Assertion <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (notWord: org.scalatest.words.NotWord)org.scalatest.words.ResultOfNotWordForAny[org.bitbucket.inkytonik.kiama.parsing.ParseResult[haslang.HasLangTree.Defn]] <and>[0m
[0m[[0m[31merror[0m] [0m[0m  [TYPECLASS1[_], TYPECLASS2[_]](rightMatcherFactory2: org.scalatest.matchers.MatcherFactory2[org.bitbucket.inkytonik.kiama.parsing.ParseResult[haslang.HasLangTree.Defn],TYPECLASS1,TYPECLASS2])(implicit typeClass1: TYPECLASS1[org.bitbucket.inkytonik.kiama.parsing.ParseResult[haslang.HasLangTree.Defn]], implicit typeClass2: TYPECLASS2[org.bitbucket.inkytonik.kiama.parsing.ParseResult[haslang.HasLangTree.Defn]])org.scalatest.Assertion <and>[0m
[0m[[0m[31merror[0m] [0m[0m  [TYPECLASS1[_]](rightMatcherFactory1: org.scalatest.matchers.MatcherFactory1[org.bitbucket.inkytonik.kiama.parsing.ParseResult[haslang.HasLangTree.Defn],TYPECLASS1])(implicit typeClass1: TYPECLASS1[org.bitbucket.inkytonik.kiama.parsing.ParseResult[haslang.HasLangTree.Defn]])org.scalatest.Assertion <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (rightMatcherX1: org.scalatest.matchers.Matcher[org.bitbucket.inkytonik.kiama.parsing.ParseResult[haslang.HasLangTree.Defn]])org.scalatest.Assertion[0m
[0m[[0m[31merror[0m] [0m[0m cannot be applied to (org.scalatest.matchers.Matcher[org.bitbucket.inkytonik.kiama.parsing.ParseResult[haslang.HasLangTree.Program]])[0m
[0m[[0m[31merror[0m] [0m[0m                length x""") should parseTo[Program] (Program([0m
[0m[[0m[31merror[0m] [0m[0m                             ^[0m
[0m[[0m[31merror[0m] [0m[0mone error found[0m
